// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql" // NOTE: sqlite does not work with NextAuth.js
  url      = env("DATABASE_URL")
}

model SavedTransaction {
  id          String  @id @default(cuid())
  amount      Float
  description String
  type        String
  categoryId  String?
  walletId    String
  walletToId  String?
  userid      String

  user     User      @relation(fields: [userid], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id])
  wallet   Wallet    @relation("st-w-w", fields: [walletId], references: [id])
  walletTo Wallet?   @relation("st-w-wt", fields: [walletToId], references: [id])
}

model Transaction {
  id          String   @id @default(cuid())
  amount      Float
  date        DateTime
  description String
  type        String
  future      Boolean  @default(false)
  categoryId  String?
  walletId    String
  walletToId  String?
  userid      String

  user     User      @relation(fields: [userid], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id])
  wallet   Wallet    @relation("t-w-w", fields: [walletId], references: [id])
  walletTo Wallet?   @relation("t-w-wt", fields: [walletToId], references: [id])
}

model Category {
  id        String   @id @default(cuid())
  atBalance Boolean? @default(true)
  color     String
  name      String
  type      String
  userid    String

  oldId String?

  user              User               @relation(fields: [userid], references: [id], onDelete: Cascade)
  SavedTransactions SavedTransaction[]
  Transactions      Transaction[]
  Budgets           Budget[]
}

model Wallet {
  id           String   @id @default(cuid())
  deleted      Boolean?
  currentValue Float
  initialValue Float
  name         String
  type         Int
  userid       String

  oldId String?

  user                      User               @relation(fields: [userid], references: [id], onDelete: Cascade)
  SavedTransaction_wallet   SavedTransaction[] @relation("st-w-w")
  SavedTransaction_walletTo SavedTransaction[] @relation("st-w-wt")

  Transaction_wallet   Transaction[] @relation("t-w-w")
  Transaction_walletTo Transaction[] @relation("t-w-wt")
}

enum BudgetType {
  WEEKLY
  MONTHLY
}

model Budget {
  id         String     @id @default(cuid())
  type       BudgetType
  amount     Float
  categoryId String
  userId     String

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts          Account[]
  sessions          Session[]
  SavedTransactions SavedTransaction[]
  Transactions      Transaction[]
  Categories        Category[]
  Wallets           Wallet[]
  Budget            Budget[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
