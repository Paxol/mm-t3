/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/engines": {
    /**
     * Lists the currently available (non-finetuned) models, and provides basic information about each one such as the owner and availability. 
     * @deprecated
     */
    get: operations["listEngines"];
  };
  "/engines/{engine_id}": {
    /**
     * Retrieves a model instance, providing basic information about it such as the owner and availability. 
     * @deprecated
     */
    get: operations["retrieveEngine"];
  };
  "/completions": {
    /** Creates a completion for the provided prompt and parameters */
    post: operations["createCompletion"];
  };
  "/chat/completions": {
    /** Creates a completion for the chat message */
    post: operations["createChatCompletion"];
  };
  "/edits": {
    /** Creates a new edit for the provided input, instruction, and parameters. */
    post: operations["createEdit"];
  };
  "/images/generations": {
    /** Creates an image given a prompt. */
    post: operations["createImage"];
  };
  "/images/edits": {
    /** Creates an edited or extended image given an original image and a prompt. */
    post: operations["createImageEdit"];
  };
  "/images/variations": {
    /** Creates a variation of a given image. */
    post: operations["createImageVariation"];
  };
  "/embeddings": {
    /** Creates an embedding vector representing the input text. */
    post: operations["createEmbedding"];
  };
  "/audio/transcriptions": {
    /** Transcribes audio into the input language. */
    post: operations["createTranscription"];
  };
  "/audio/translations": {
    /** Translates audio into into English. */
    post: operations["createTranslation"];
  };
  "/engines/{engine_id}/search": {
    /**
     * The search endpoint computes similarity scores between provided query and documents. Documents can be passed directly to the API if there are no more than 200 of them.
     * 
     * To go beyond the 200 document limit, documents can be processed offline and then used for efficient retrieval at query time. When `file` is set, the search endpoint searches over all the documents in the given file and returns up to the `max_rerank` number of documents. These documents will be returned along with their search scores.
     * 
     * The similarity score is a positive score that usually ranges from 0 to 300 (but can sometimes go higher), where a score above 200 usually means the document is semantically similar to the query.
     *  
     * @deprecated
     */
    post: operations["createSearch"];
  };
  "/files": {
    /** Returns a list of files that belong to the user's organization. */
    get: operations["listFiles"];
    /** Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit. */
    post: operations["createFile"];
  };
  "/files/{file_id}": {
    /** Returns information about a specific file. */
    get: operations["retrieveFile"];
    /** Delete a file. */
    delete: operations["deleteFile"];
  };
  "/files/{file_id}/content": {
    /** Returns the contents of the specified file */
    get: operations["downloadFile"];
  };
  "/answers": {
    /**
     * Answers the specified question using the provided documents and examples.
     * 
     * The endpoint first [searches](/docs/api-reference/searches) over provided documents or files to find relevant context. The relevant context is combined with the provided examples and question to create the prompt for [completion](/docs/api-reference/completions).
     *  
     * @deprecated
     */
    post: operations["createAnswer"];
  };
  "/classifications": {
    /**
     * Classifies the specified `query` using provided examples.
     * 
     * The endpoint first [searches](/docs/api-reference/searches) over the labeled examples
     * to select the ones most relevant for the particular query. Then, the relevant examples
     * are combined with the query to construct a prompt to produce the final label via the
     * [completions](/docs/api-reference/completions) endpoint.
     * 
     * Labeled examples can be provided via an uploaded `file`, or explicitly listed in the
     * request using the `examples` parameter for quick tests and small scale use cases.
     *  
     * @deprecated
     */
    post: operations["createClassification"];
  };
  "/fine-tunes": {
    /** List your organization's fine-tuning jobs */
    get: operations["listFineTunes"];
    /**
     * Creates a job that fine-tunes a specified model from a given dataset.
     * 
     * Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.
     * 
     * [Learn more about Fine-tuning](/docs/guides/fine-tuning)
     */
    post: operations["createFineTune"];
  };
  "/fine-tunes/{fine_tune_id}": {
    /**
     * Gets info about the fine-tune job.
     * 
     * [Learn more about Fine-tuning](/docs/guides/fine-tuning)
     */
    get: operations["retrieveFineTune"];
  };
  "/fine-tunes/{fine_tune_id}/cancel": {
    /** Immediately cancel a fine-tune job. */
    post: operations["cancelFineTune"];
  };
  "/fine-tunes/{fine_tune_id}/events": {
    /** Get fine-grained status updates for a fine-tune job. */
    get: operations["listFineTuneEvents"];
  };
  "/models": {
    /** Lists the currently available models, and provides basic information about each one such as the owner and availability. */
    get: operations["listModels"];
  };
  "/models/{model}": {
    /** Retrieves a model instance, providing basic information about the model such as the owner and permissioning. */
    get: operations["retrieveModel"];
    /** Delete a fine-tuned model. You must have the Owner role in your organization. */
    delete: operations["deleteModel"];
  };
  "/moderations": {
    /** Classifies if text violates OpenAI's Content Policy */
    post: operations["createModeration"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ListEnginesResponse: {
      object: string;
      data: (components["schemas"]["Engine"])[];
    };
    ListModelsResponse: {
      object: string;
      data: (components["schemas"]["Model"])[];
    };
    DeleteModelResponse: {
      id: string;
      object: string;
      deleted: boolean;
    };
    CreateCompletionRequest: {
      /** @description ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them. */
      model: string;
      /**
       * @description The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.
       * 
       * Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.
       *  
       * @default <|endoftext|>
       */
      prompt?: string | (string)[] | (number)[] | ((number)[])[];
      /**
       * @description The suffix that comes after a completion of inserted text. 
       * @default null 
       * @example test.
       */
      suffix?: string | null;
      /**
       * @description The maximum number of [tokens](/tokenizer) to generate in the completion.
       * 
       * The token count of your prompt plus `max_tokens` cannot exceed the model's context length. Most models have a context length of 2048 tokens (except for the newest models, which support 4096).
       *  
       * @default 16 
       * @example 16
       */
      max_tokens?: number | null;
      /**
       * @description What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
       * 
       * We generally recommend altering this or `top_p` but not both.
       *  
       * @default 1 
       * @example 1
       */
      temperature?: number | null;
      /**
       * @description An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
       * 
       * We generally recommend altering this or `temperature` but not both.
       *  
       * @default 1 
       * @example 1
       */
      top_p?: number | null;
      /**
       * @description How many completions to generate for each prompt.
       * 
       * **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
       *  
       * @default 1 
       * @example 1
       */
      n?: number | null;
      /**
       * @description Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message.
       *  
       * @default false
       */
      stream?: boolean | null;
      /**
       * @description Include the log probabilities on the `logprobs` most likely tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.
       * 
       * The maximum value for `logprobs` is 5. If you need more than this, please contact us through our [Help center](https://help.openai.com) and describe your use case.
       *  
       * @default null
       */
      logprobs?: number | null;
      /**
       * @description Echo back the prompt in addition to the completion
       *  
       * @default false
       */
      echo?: boolean | null;
      /**
       * @description Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.
       *  
       * @default null
       */
      stop?: (string | null) | (string)[];
      /**
       * @description Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
       * 
       * [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)
       *  
       * @default 0
       */
      presence_penalty?: number | null;
      /**
       * @description Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
       * 
       * [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)
       *  
       * @default 0
       */
      frequency_penalty?: number | null;
      /**
       * @description Generates `best_of` completions server-side and returns the "best" (the one with the highest log probability per token). Results cannot be streamed.
       * 
       * When used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return – `best_of` must be greater than `n`.
       * 
       * **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
       *  
       * @default 1
       */
      best_of?: number | null;
      /**
       * @description Modify the likelihood of specified tokens appearing in the completion.
       * 
       * Accepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
       * 
       * As an example, you can pass `{"50256": -100}` to prevent the <|endoftext|> token from being generated.
       *  
       * @default null
       */
      logit_bias?: Record<string, unknown> | null;
      /**
       * @description A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
       *  
       * @example user-1234
       */
      user?: string;
    };
    CreateCompletionResponse: {
      id: string;
      object: string;
      created: number;
      model: string;
      choices: ({
          text?: string;
          index?: number;
          logprobs?: {
            tokens?: (string)[];
            token_logprobs?: (number)[];
            top_logprobs?: (Record<string, never>)[];
            text_offset?: (number)[];
          } | null;
          finish_reason?: string;
        })[];
      usage?: {
        prompt_tokens: number;
        completion_tokens: number;
        total_tokens: number;
      };
    };
    ChatCompletionRequestMessage: {
      /**
       * @description The role of the author of this message. 
       * @enum {string}
       */
      role: "system" | "user" | "assistant";
      /** @description The contents of the message */
      content: string;
      /** @description The name of the user in a multi-user chat */
      name?: string;
    };
    ChatCompletionResponseMessage: {
      /**
       * @description The role of the author of this message. 
       * @enum {string}
       */
      role: "system" | "user" | "assistant";
      /** @description The contents of the message */
      content: string;
    };
    CreateChatCompletionRequest: {
      /** @description ID of the model to use. Currently, only `gpt-3.5-turbo` and `gpt-3.5-turbo-0301` are supported. */
      model: string;
      /** @description The messages to generate chat completions for, in the [chat format](/docs/guides/chat/introduction). */
      messages: (components["schemas"]["ChatCompletionRequestMessage"])[];
      /**
       * @description What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
       * 
       * We generally recommend altering this or `top_p` but not both.
       *  
       * @default 1 
       * @example 1
       */
      temperature?: number | null;
      /**
       * @description An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
       * 
       * We generally recommend altering this or `temperature` but not both.
       *  
       * @default 1 
       * @example 1
       */
      top_p?: number | null;
      /**
       * @description How many chat completion choices to generate for each input message. 
       * @default 1 
       * @example 1
       */
      n?: number | null;
      /**
       * @description If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message.
       *  
       * @default false
       */
      stream?: boolean | null;
      /**
       * @description Up to 4 sequences where the API will stop generating further tokens.
       *  
       * @default null
       */
      stop?: (string | null) | (string)[];
      /**
       * @description The maximum number of tokens allowed for the generated answer. By default, the number of tokens the model can return will be (4096 - prompt tokens).
       *  
       * @default inf
       */
      max_tokens?: number;
      /**
       * @description Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
       * 
       * [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)
       *  
       * @default 0
       */
      presence_penalty?: number | null;
      /**
       * @description Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
       * 
       * [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)
       *  
       * @default 0
       */
      frequency_penalty?: number | null;
      /**
       * @description Modify the likelihood of specified tokens appearing in the completion.
       * 
       * Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
       *  
       * @default null
       */
      logit_bias?: Record<string, unknown> | null;
      /**
       * @description A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
       *  
       * @example user-1234
       */
      user?: string;
    };
    CreateChatCompletionResponse: {
      id: string;
      object: string;
      created: number;
      model: string;
      choices: ({
          index?: number;
          message?: components["schemas"]["ChatCompletionResponseMessage"];
          finish_reason?: string;
        })[];
      usage?: {
        prompt_tokens: number;
        completion_tokens: number;
        total_tokens: number;
      };
    };
    CreateEditRequest: {
      /** @description ID of the model to use. You can use the `text-davinci-edit-001` or `code-davinci-edit-001` model with this endpoint. */
      model: string;
      /**
       * @description The input text to use as a starting point for the edit. 
       * @default  
       * @example What day of the wek is it?
       */
      input?: string | null;
      /**
       * @description The instruction that tells the model how to edit the prompt. 
       * @example Fix the spelling mistakes.
       */
      instruction: string;
      /**
       * @description How many edits to generate for the input and instruction. 
       * @default 1 
       * @example 1
       */
      n?: number | null;
      /**
       * @description What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
       * 
       * We generally recommend altering this or `top_p` but not both.
       *  
       * @default 1 
       * @example 1
       */
      temperature?: number | null;
      /**
       * @description An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
       * 
       * We generally recommend altering this or `temperature` but not both.
       *  
       * @default 1 
       * @example 1
       */
      top_p?: number | null;
    };
    CreateEditResponse: {
      object: string;
      created: number;
      choices: ({
          text?: string;
          index?: number;
          logprobs?: {
            tokens?: (string)[];
            token_logprobs?: (number)[];
            top_logprobs?: (Record<string, never>)[];
            text_offset?: (number)[];
          } | null;
          finish_reason?: string;
        })[];
      usage: {
        prompt_tokens: number;
        completion_tokens: number;
        total_tokens: number;
      };
    };
    CreateImageRequest: {
      /**
       * @description A text description of the desired image(s). The maximum length is 1000 characters. 
       * @example A cute baby sea otter
       */
      prompt: string;
      /**
       * @description The number of images to generate. Must be between 1 and 10. 
       * @default 1 
       * @example 1
       */
      n?: number | null;
      /**
       * @description The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`. 
       * @default 1024x1024 
       * @example 1024x1024 
       * @enum {string|null}
       */
      size?: "256x256" | "512x512" | "1024x1024" | null;
      /**
       * @description The format in which the generated images are returned. Must be one of `url` or `b64_json`. 
       * @default url 
       * @example url 
       * @enum {string|null}
       */
      response_format?: "url" | "b64_json" | null;
      /**
       * @description A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
       *  
       * @example user-1234
       */
      user?: string;
    };
    ImagesResponse: {
      created: number;
      data: ({
          url?: string;
          b64_json?: string;
        })[];
    };
    CreateImageEditRequest: {
      /**
       * Format: binary 
       * @description The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.
       */
      image: string;
      /**
       * Format: binary 
       * @description An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where `image` should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as `image`.
       */
      mask?: string;
      /**
       * @description A text description of the desired image(s). The maximum length is 1000 characters. 
       * @example A cute baby sea otter wearing a beret
       */
      prompt: string;
      /**
       * @description The number of images to generate. Must be between 1 and 10. 
       * @default 1 
       * @example 1
       */
      n?: number | null;
      /**
       * @description The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`. 
       * @default 1024x1024 
       * @example 1024x1024 
       * @enum {string|null}
       */
      size?: "256x256" | "512x512" | "1024x1024" | null;
      /**
       * @description The format in which the generated images are returned. Must be one of `url` or `b64_json`. 
       * @default url 
       * @example url 
       * @enum {string|null}
       */
      response_format?: "url" | "b64_json" | null;
      /**
       * @description A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
       *  
       * @example user-1234
       */
      user?: string;
    };
    CreateImageVariationRequest: {
      /**
       * Format: binary 
       * @description The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.
       */
      image: string;
      /**
       * @description The number of images to generate. Must be between 1 and 10. 
       * @default 1 
       * @example 1
       */
      n?: number | null;
      /**
       * @description The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`. 
       * @default 1024x1024 
       * @example 1024x1024 
       * @enum {string|null}
       */
      size?: "256x256" | "512x512" | "1024x1024" | null;
      /**
       * @description The format in which the generated images are returned. Must be one of `url` or `b64_json`. 
       * @default url 
       * @example url 
       * @enum {string|null}
       */
      response_format?: "url" | "b64_json" | null;
      /**
       * @description A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
       *  
       * @example user-1234
       */
      user?: string;
    };
    CreateModerationRequest: {
      /** @description The input text to classify */
      input: string | (string)[];
      /**
       * @description Two content moderations models are available: `text-moderation-stable` and `text-moderation-latest`.
       * 
       * The default is `text-moderation-latest` which will be automatically upgraded over time. This ensures you are always using our most accurate model. If you use `text-moderation-stable`, we will provide advanced notice before updating the model. Accuracy of `text-moderation-stable` may be slightly lower than for `text-moderation-latest`.
       *  
       * @default text-moderation-latest 
       * @example text-moderation-stable
       */
      model?: string;
    };
    CreateModerationResponse: {
      id: string;
      model: string;
      results: ({
          flagged: boolean;
          categories: {
            hate: boolean;
            "hate/threatening": boolean;
            "self-harm": boolean;
            sexual: boolean;
            "sexual/minors": boolean;
            violence: boolean;
            "violence/graphic": boolean;
          };
          category_scores: {
            hate: number;
            "hate/threatening": number;
            "self-harm": number;
            sexual: number;
            "sexual/minors": number;
            violence: number;
            "violence/graphic": number;
          };
        })[];
    };
    CreateSearchRequest: {
      /**
       * @description Query to search against the documents. 
       * @example the president
       */
      query: string;
      /**
       * @description Up to 200 documents to search over, provided as a list of strings.
       * 
       * The maximum document length (in tokens) is 2034 minus the number of tokens in the query.
       * 
       * You should specify either `documents` or a `file`, but not both.
       *  
       * @example ['White House', 'hospital', 'school']
       */
      documents?: (string)[] | null;
      /**
       * @description The ID of an uploaded file that contains documents to search over.
       * 
       * You should specify either `documents` or a `file`, but not both.
       */
      file?: string | null;
      /**
       * @description The maximum number of documents to be re-ranked and returned by search.
       * 
       * This flag only takes effect when `file` is set.
       *  
       * @default 200
       */
      max_rerank?: number | null;
      /**
       * @description A special boolean flag for showing metadata. If set to `true`, each document entry in the returned JSON will contain a "metadata" field.
       * 
       * This flag only takes effect when `file` is set.
       *  
       * @default false
       */
      return_metadata?: boolean | null;
      /**
       * @description A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
       *  
       * @example user-1234
       */
      user?: string;
    };
    CreateSearchResponse: {
      object?: string;
      model?: string;
      data?: ({
          object?: string;
          document?: number;
          score?: number;
        })[];
    };
    ListFilesResponse: {
      object: string;
      data: (components["schemas"]["OpenAIFile"])[];
    };
    CreateFileRequest: {
      /**
       * Format: binary 
       * @description Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.
       * 
       * If the `purpose` is set to "fine-tune", each line is a JSON record with "prompt" and "completion" fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data).
       */
      file: string;
      /**
       * @description The intended purpose of the uploaded documents.
       * 
       * Use "fine-tune" for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file.
       */
      purpose: string;
    };
    DeleteFileResponse: {
      id: string;
      object: string;
      deleted: boolean;
    };
    CreateAnswerRequest: {
      /** @description ID of the model to use for completion. You can select one of `ada`, `babbage`, `curie`, or `davinci`. */
      model: string;
      /**
       * @description Question to get answered. 
       * @example What is the capital of Japan?
       */
      question: string;
      /**
       * @description List of (question, answer) pairs that will help steer the model towards the tone and answer format you'd like. We recommend adding 2 to 3 examples. 
       * @example [['What is the capital of Canada?', 'Ottawa'], ['Which province is Ottawa in?', 'Ontario']]
       */
      examples: ((string)[])[];
      /**
       * @description A text snippet containing the contextual information used to generate the answers for the `examples` you provide. 
       * @example Ottawa, Canada's capital, is located in the east of southern Ontario, near the city of Montréal and the U.S. border.
       */
      examples_context: string;
      /**
       * @description List of documents from which the answer for the input `question` should be derived. If this is an empty list, the question will be answered based on the question-answer examples.
       * 
       * You should specify either `documents` or a `file`, but not both.
       *  
       * @example ['Japan is an island country in East Asia, located in the northwest Pacific Ocean.', 'Tokyo is the capital and most populous prefecture of Japan.']
       */
      documents?: (string)[] | null;
      /**
       * @description The ID of an uploaded file that contains documents to search over. See [upload file](/docs/api-reference/files/upload) for how to upload a file of the desired format and purpose.
       * 
       * You should specify either `documents` or a `file`, but not both.
       */
      file?: string | null;
      /**
       * @description ID of the model to use for [Search](/docs/api-reference/searches/create). You can select one of `ada`, `babbage`, `curie`, or `davinci`. 
       * @default ada
       */
      search_model?: string | null;
      /**
       * @description The maximum number of documents to be ranked by [Search](/docs/api-reference/searches/create) when using `file`. Setting it to a higher value leads to improved accuracy but with increased latency and cost. 
       * @default 200
       */
      max_rerank?: number | null;
      /**
       * @description What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. 
       * @default 0
       */
      temperature?: number | null;
      /**
       * @description Include the log probabilities on the `logprobs` most likely tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.
       * 
       * The maximum value for `logprobs` is 5. If you need more than this, please contact us through our [Help center](https://help.openai.com) and describe your use case.
       * 
       * When `logprobs` is set, `completion` will be automatically added into `expand` to get the logprobs.
       *  
       * @default null
       */
      logprobs?: number | null;
      /**
       * @description The maximum number of tokens allowed for the generated answer 
       * @default 16
       */
      max_tokens?: number | null;
      /**
       * @description Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.
       *  
       * @default null
       */
      stop?: string | (string)[];
      /**
       * @description How many answers to generate for each question. 
       * @default 1
       */
      n?: number | null;
      /**
       * @description Modify the likelihood of specified tokens appearing in the completion.
       * 
       * Accepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
       * 
       * As an example, you can pass `{"50256": -100}` to prevent the <|endoftext|> token from being generated.
       *  
       * @default null
       */
      logit_bias?: Record<string, unknown> | null;
      /**
       * @description A special boolean flag for showing metadata. If set to `true`, each document entry in the returned JSON will contain a "metadata" field.
       * 
       * This flag only takes effect when `file` is set.
       *  
       * @default false
       */
      return_metadata?: boolean | null;
      /**
       * @description If set to `true`, the returned JSON will include a "prompt" field containing the final prompt that was used to request a completion. This is mainly useful for debugging purposes. 
       * @default false
       */
      return_prompt?: boolean | null;
      /**
       * @description If an object name is in the list, we provide the full information of the object; otherwise, we only provide the object ID. Currently we support `completion` and `file` objects for expansion. 
       * @default []
       */
      expand?: (unknown)[] | null;
      /**
       * @description A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
       *  
       * @example user-1234
       */
      user?: string;
    };
    CreateAnswerResponse: {
      object?: string;
      model?: string;
      search_model?: string;
      completion?: string;
      answers?: (string)[];
      selected_documents?: ({
          document?: number;
          text?: string;
        })[];
    };
    CreateClassificationRequest: {
      /** @description ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them. */
      model: string;
      /**
       * @description Query to be classified. 
       * @example The plot is not very attractive.
       */
      query: string;
      /**
       * @description A list of examples with labels, in the following format:
       * 
       * `[["The movie is so interesting.", "Positive"], ["It is quite boring.", "Negative"], ...]`
       * 
       * All the label strings will be normalized to be capitalized.
       * 
       * You should specify either `examples` or `file`, but not both.
       *  
       * @example [['Do not see this film.', 'Negative'], ['Smart, provocative and blisteringly funny.', 'Positive']]
       */
      examples?: ((string)[])[] | null;
      /**
       * @description The ID of the uploaded file that contains training examples. See [upload file](/docs/api-reference/files/upload) for how to upload a file of the desired format and purpose.
       * 
       * You should specify either `examples` or `file`, but not both.
       */
      file?: string | null;
      /**
       * @description The set of categories being classified. If not specified, candidate labels will be automatically collected from the examples you provide. All the label strings will be normalized to be capitalized. 
       * @default null 
       * @example [
       *   "Positive",
       *   "Negative"
       * ]
       */
      labels?: (string)[] | null;
      /**
       * @description ID of the model to use for [Search](/docs/api-reference/searches/create). You can select one of `ada`, `babbage`, `curie`, or `davinci`. 
       * @default ada
       */
      search_model?: string | null;
      /**
       * @description What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. 
       * @default 0 
       * @example 0
       */
      temperature?: number | null;
      /**
       * @description Include the log probabilities on the `logprobs` most likely tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.
       * 
       * The maximum value for `logprobs` is 5. If you need more than this, please contact us through our [Help center](https://help.openai.com) and describe your use case.
       * 
       * When `logprobs` is set, `completion` will be automatically added into `expand` to get the logprobs.
       *  
       * @default null
       */
      logprobs?: number | null;
      /**
       * @description The maximum number of examples to be ranked by [Search](/docs/api-reference/searches/create) when using `file`. Setting it to a higher value leads to improved accuracy but with increased latency and cost. 
       * @default 200
       */
      max_examples?: number | null;
      /**
       * @description Modify the likelihood of specified tokens appearing in the completion.
       * 
       * Accepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
       * 
       * As an example, you can pass `{"50256": -100}` to prevent the <|endoftext|> token from being generated.
       *  
       * @default null
       */
      logit_bias?: Record<string, unknown> | null;
      /**
       * @description If set to `true`, the returned JSON will include a "prompt" field containing the final prompt that was used to request a completion. This is mainly useful for debugging purposes. 
       * @default false
       */
      return_prompt?: boolean | null;
      /**
       * @description A special boolean flag for showing metadata. If set to `true`, each document entry in the returned JSON will contain a "metadata" field.
       * 
       * This flag only takes effect when `file` is set.
       *  
       * @default false
       */
      return_metadata?: boolean | null;
      /**
       * @description If an object name is in the list, we provide the full information of the object; otherwise, we only provide the object ID. Currently we support `completion` and `file` objects for expansion. 
       * @default []
       */
      expand?: (unknown)[] | null;
      /**
       * @description A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
       *  
       * @example user-1234
       */
      user?: string;
    };
    CreateClassificationResponse: {
      object?: string;
      model?: string;
      search_model?: string;
      completion?: string;
      label?: string;
      selected_examples?: ({
          document?: number;
          text?: string;
          label?: string;
        })[];
    };
    CreateFineTuneRequest: {
      /**
       * @description The ID of an uploaded file that contains training data.
       * 
       * See [upload file](/docs/api-reference/files/upload) for how to upload a file.
       * 
       * Your dataset must be formatted as a JSONL file, where each training
       * example is a JSON object with the keys "prompt" and "completion".
       * Additionally, you must upload your file with the purpose `fine-tune`.
       * 
       * See the [fine-tuning guide](/docs/guides/fine-tuning/creating-training-data) for more details.
       *  
       * @example file-ajSREls59WBbvgSzJSVWxMCB
       */
      training_file: string;
      /**
       * @description The ID of an uploaded file that contains validation data.
       * 
       * If you provide this file, the data is used to generate validation
       * metrics periodically during fine-tuning. These metrics can be viewed in
       * the [fine-tuning results file](/docs/guides/fine-tuning/analyzing-your-fine-tuned-model).
       * Your train and validation data should be mutually exclusive.
       * 
       * Your dataset must be formatted as a JSONL file, where each validation
       * example is a JSON object with the keys "prompt" and "completion".
       * Additionally, you must upload your file with the purpose `fine-tune`.
       * 
       * See the [fine-tuning guide](/docs/guides/fine-tuning/creating-training-data) for more details.
       *  
       * @example file-XjSREls59WBbvgSzJSVWxMCa
       */
      validation_file?: string | null;
      /**
       * @description The name of the base model to fine-tune. You can select one of "ada",
       * "babbage", "curie", "davinci", or a fine-tuned model created after 2022-04-21.
       * To learn more about these models, see the
       * [Models](https://platform.openai.com/docs/models) documentation.
       *  
       * @default curie
       */
      model?: string | null;
      /**
       * @description The number of epochs to train the model for. An epoch refers to one
       * full cycle through the training dataset.
       *  
       * @default 4
       */
      n_epochs?: number | null;
      /**
       * @description The batch size to use for training. The batch size is the number of
       * training examples used to train a single forward and backward pass.
       * 
       * By default, the batch size will be dynamically configured to be
       * ~0.2% of the number of examples in the training set, capped at 256 -
       * in general, we've found that larger batch sizes tend to work better
       * for larger datasets.
       *  
       * @default null
       */
      batch_size?: number | null;
      /**
       * @description The learning rate multiplier to use for training.
       * The fine-tuning learning rate is the original learning rate used for
       * pretraining multiplied by this value.
       * 
       * By default, the learning rate multiplier is the 0.05, 0.1, or 0.2
       * depending on final `batch_size` (larger learning rates tend to
       * perform better with larger batch sizes). We recommend experimenting
       * with values in the range 0.02 to 0.2 to see what produces the best
       * results.
       *  
       * @default null
       */
      learning_rate_multiplier?: number | null;
      /**
       * @description The weight to use for loss on the prompt tokens. This controls how
       * much the model tries to learn to generate the prompt (as compared
       * to the completion which always has a weight of 1.0), and can add
       * a stabilizing effect to training when completions are short.
       * 
       * If prompts are extremely long (relative to completions), it may make
       * sense to reduce this weight so as to avoid over-prioritizing
       * learning the prompt.
       *  
       * @default 0.01
       */
      prompt_loss_weight?: number | null;
      /**
       * @description If set, we calculate classification-specific metrics such as accuracy
       * and F-1 score using the validation set at the end of every epoch.
       * These metrics can be viewed in the [results file](/docs/guides/fine-tuning/analyzing-your-fine-tuned-model).
       * 
       * In order to compute classification metrics, you must provide a
       * `validation_file`. Additionally, you must
       * specify `classification_n_classes` for multiclass classification or
       * `classification_positive_class` for binary classification.
       *  
       * @default false
       */
      compute_classification_metrics?: boolean | null;
      /**
       * @description The number of classes in a classification task.
       * 
       * This parameter is required for multiclass classification.
       *  
       * @default null
       */
      classification_n_classes?: number | null;
      /**
       * @description The positive class in binary classification.
       * 
       * This parameter is needed to generate precision, recall, and F1
       * metrics when doing binary classification.
       *  
       * @default null
       */
      classification_positive_class?: string | null;
      /**
       * @description If this is provided, we calculate F-beta scores at the specified
       * beta values. The F-beta score is a generalization of F-1 score.
       * This is only used for binary classification.
       * 
       * With a beta of 1 (i.e. the F-1 score), precision and recall are
       * given the same weight. A larger beta score puts more weight on
       * recall and less on precision. A smaller beta score puts more weight
       * on precision and less on recall.
       *  
       * @default null 
       * @example [
       *   0.6,
       *   1,
       *   1.5,
       *   2
       * ]
       */
      classification_betas?: (number)[] | null;
      /**
       * @description A string of up to 40 characters that will be added to your fine-tuned model name.
       * 
       * For example, a `suffix` of "custom-model-name" would produce a model name like `ada:ft-your-org:custom-model-name-2022-02-15-04-21-04`.
       *  
       * @default null
       */
      suffix?: string | null;
    };
    ListFineTunesResponse: {
      object: string;
      data: (components["schemas"]["FineTune"])[];
    };
    ListFineTuneEventsResponse: {
      object: string;
      data: (components["schemas"]["FineTuneEvent"])[];
    };
    CreateEmbeddingRequest: {
      /** @description ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them. */
      model: string;
      /**
       * @description Input text to get embeddings for, encoded as a string or array of tokens. To get embeddings for multiple inputs in a single request, pass an array of strings or array of token arrays. Each input must not exceed 8192 tokens in length.
       *  
       * @example The quick brown fox jumped over the lazy dog
       */
      input: string | (string)[] | (number)[] | ((number)[])[];
      /**
       * @description A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
       *  
       * @example user-1234
       */
      user?: string;
    };
    CreateEmbeddingResponse: {
      object: string;
      model: string;
      data: ({
          index: number;
          object: string;
          embedding: (number)[];
        })[];
      usage: {
        prompt_tokens: number;
        total_tokens: number;
      };
    };
    CreateTranscriptionRequest: {
      /**
       * Format: binary 
       * @description The audio file to transcribe, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm.
       */
      file: string;
      /** @description ID of the model to use. Only `whisper-1` is currently available. */
      model: string;
      /** @description An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language. */
      prompt?: string;
      /**
       * @description The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.
       *  
       * @default json
       */
      response_format?: string;
      /**
       * @description The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.
       *  
       * @default 0
       */
      temperature?: number;
      /** @description The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency. */
      language?: string;
    };
    CreateTranscriptionResponse: {
      text: string;
    };
    CreateTranslationRequest: {
      /**
       * Format: binary 
       * @description The audio file to translate, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm.
       */
      file: string;
      /** @description ID of the model to use. Only `whisper-1` is currently available. */
      model: string;
      /** @description An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English. */
      prompt?: string;
      /**
       * @description The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.
       *  
       * @default json
       */
      response_format?: string;
      /**
       * @description The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.
       *  
       * @default 0
       */
      temperature?: number;
    };
    CreateTranslationResponse: {
      text: string;
    };
    /** Engine */
    Engine: {
      id: string;
      object: string;
      created: number | null;
      ready: boolean;
    };
    /** Model */
    Model: {
      id: string;
      object: string;
      created: number;
      owned_by: string;
    };
    /** OpenAIFile */
    OpenAIFile: {
      id: string;
      object: string;
      bytes: number;
      created_at: number;
      filename: string;
      purpose: string;
      status?: string;
      status_details?: Record<string, unknown> | null;
    };
    /** FineTune */
    FineTune: {
      id: string;
      object: string;
      created_at: number;
      updated_at: number;
      model: string;
      fine_tuned_model: string | null;
      organization_id: string;
      status: string;
      hyperparams: Record<string, never>;
      training_files: (components["schemas"]["OpenAIFile"])[];
      validation_files: (components["schemas"]["OpenAIFile"])[];
      result_files: (components["schemas"]["OpenAIFile"])[];
      events?: (components["schemas"]["FineTuneEvent"])[];
    };
    /** FineTuneEvent */
    FineTuneEvent: {
      object: string;
      created_at: number;
      level: string;
      message: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /**
   * Lists the currently available (non-finetuned) models, and provides basic information about each one such as the owner and availability. 
   * @deprecated
   */
  listEngines: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListEnginesResponse"];
        };
      };
    };
  };
  /**
   * Retrieves a model instance, providing basic information about it such as the owner and availability. 
   * @deprecated
   */
  retrieveEngine: {
    parameters: {
      path: {
        /** @description The ID of the engine to use for this request */
        engine_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Engine"];
        };
      };
    };
  };
  /** Creates a completion for the provided prompt and parameters */
  createCompletion: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateCompletionRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateCompletionResponse"];
        };
      };
    };
  };
  /** Creates a completion for the chat message */
  createChatCompletion: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateChatCompletionRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateChatCompletionResponse"];
        };
      };
    };
  };
  /** Creates a new edit for the provided input, instruction, and parameters. */
  createEdit: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateEditRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateEditResponse"];
        };
      };
    };
  };
  /** Creates an image given a prompt. */
  createImage: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateImageRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ImagesResponse"];
        };
      };
    };
  };
  /** Creates an edited or extended image given an original image and a prompt. */
  createImageEdit: {
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["CreateImageEditRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ImagesResponse"];
        };
      };
    };
  };
  /** Creates a variation of a given image. */
  createImageVariation: {
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["CreateImageVariationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ImagesResponse"];
        };
      };
    };
  };
  /** Creates an embedding vector representing the input text. */
  createEmbedding: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateEmbeddingRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateEmbeddingResponse"];
        };
      };
    };
  };
  /** Transcribes audio into the input language. */
  createTranscription: {
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["CreateTranscriptionRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateTranscriptionResponse"];
        };
      };
    };
  };
  /** Translates audio into into English. */
  createTranslation: {
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["CreateTranslationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateTranslationResponse"];
        };
      };
    };
  };
  /**
   * The search endpoint computes similarity scores between provided query and documents. Documents can be passed directly to the API if there are no more than 200 of them.
   * 
   * To go beyond the 200 document limit, documents can be processed offline and then used for efficient retrieval at query time. When `file` is set, the search endpoint searches over all the documents in the given file and returns up to the `max_rerank` number of documents. These documents will be returned along with their search scores.
   * 
   * The similarity score is a positive score that usually ranges from 0 to 300 (but can sometimes go higher), where a score above 200 usually means the document is semantically similar to the query.
   *  
   * @deprecated
   */
  createSearch: {
    parameters: {
      path: {
        /** @description The ID of the engine to use for this request.  You can select one of `ada`, `babbage`, `curie`, or `davinci`. */
        engine_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateSearchRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateSearchResponse"];
        };
      };
    };
  };
  /** Returns a list of files that belong to the user's organization. */
  listFiles: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListFilesResponse"];
        };
      };
    };
  };
  /** Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit. */
  createFile: {
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["CreateFileRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["OpenAIFile"];
        };
      };
    };
  };
  /** Returns information about a specific file. */
  retrieveFile: {
    parameters: {
      path: {
        /** @description The ID of the file to use for this request */
        file_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["OpenAIFile"];
        };
      };
    };
  };
  /** Delete a file. */
  deleteFile: {
    parameters: {
      path: {
        /** @description The ID of the file to use for this request */
        file_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DeleteFileResponse"];
        };
      };
    };
  };
  /** Returns the contents of the specified file */
  downloadFile: {
    parameters: {
      path: {
        /** @description The ID of the file to use for this request */
        file_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /**
   * Answers the specified question using the provided documents and examples.
   * 
   * The endpoint first [searches](/docs/api-reference/searches) over provided documents or files to find relevant context. The relevant context is combined with the provided examples and question to create the prompt for [completion](/docs/api-reference/completions).
   *  
   * @deprecated
   */
  createAnswer: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateAnswerRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateAnswerResponse"];
        };
      };
    };
  };
  /**
   * Classifies the specified `query` using provided examples.
   * 
   * The endpoint first [searches](/docs/api-reference/searches) over the labeled examples
   * to select the ones most relevant for the particular query. Then, the relevant examples
   * are combined with the query to construct a prompt to produce the final label via the
   * [completions](/docs/api-reference/completions) endpoint.
   * 
   * Labeled examples can be provided via an uploaded `file`, or explicitly listed in the
   * request using the `examples` parameter for quick tests and small scale use cases.
   *  
   * @deprecated
   */
  createClassification: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateClassificationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateClassificationResponse"];
        };
      };
    };
  };
  /** List your organization's fine-tuning jobs */
  listFineTunes: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListFineTunesResponse"];
        };
      };
    };
  };
  /**
   * Creates a job that fine-tunes a specified model from a given dataset.
   * 
   * Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.
   * 
   * [Learn more about Fine-tuning](/docs/guides/fine-tuning)
   */
  createFineTune: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateFineTuneRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["FineTune"];
        };
      };
    };
  };
  /**
   * Gets info about the fine-tune job.
   * 
   * [Learn more about Fine-tuning](/docs/guides/fine-tuning)
   */
  retrieveFineTune: {
    parameters: {
      path: {
        /** @description The ID of the fine-tune job */
        fine_tune_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["FineTune"];
        };
      };
    };
  };
  /** Immediately cancel a fine-tune job. */
  cancelFineTune: {
    parameters: {
      path: {
        /** @description The ID of the fine-tune job to cancel */
        fine_tune_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["FineTune"];
        };
      };
    };
  };
  /** Get fine-grained status updates for a fine-tune job. */
  listFineTuneEvents: {
    parameters: {
      query?: {
        /**
         * @description Whether to stream events for the fine-tune job. If set to true,
         * events will be sent as data-only
         * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)
         * as they become available. The stream will terminate with a
         * `data: [DONE]` message when the job is finished (succeeded, cancelled,
         * or failed).
         * 
         * If set to false, only events generated so far will be returned.
         */
        stream?: boolean;
      };
      path: {
        /** @description The ID of the fine-tune job to get events for. */
        fine_tune_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListFineTuneEventsResponse"];
        };
      };
    };
  };
  /** Lists the currently available models, and provides basic information about each one such as the owner and availability. */
  listModels: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListModelsResponse"];
        };
      };
    };
  };
  /** Retrieves a model instance, providing basic information about the model such as the owner and permissioning. */
  retrieveModel: {
    parameters: {
      path: {
        /** @description The ID of the model to use for this request */
        model: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Model"];
        };
      };
    };
  };
  /** Delete a fine-tuned model. You must have the Owner role in your organization. */
  deleteModel: {
    parameters: {
      path: {
        /** @description The model to delete */
        model: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DeleteModelResponse"];
        };
      };
    };
  };
  /** Classifies if text violates OpenAI's Content Policy */
  createModeration: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateModerationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateModerationResponse"];
        };
      };
    };
  };
}
